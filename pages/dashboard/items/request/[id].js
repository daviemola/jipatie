import AuthContext from '@/context/AuthContext'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState, useContext, useEffect } from 'react'
import { FaTelegramPlane } from 'react-icons/fa'
import MainLayout from '@/components/layout/MainLayout'
import { API_URL } from '@/config/index'
import toast, { Toaster } from 'react-hot-toast'
import { parseCookies } from '@/helpers/index'
import Link from 'next/link'
import Wrapper from '@/components/dashboard/Wrapper'

export default function RequestPage({ item, token }) {
  const { user } = useContext(AuthContext)

  const [values, setValues] = useState({
    description: '',
    item: item.id,
    phone_number: '',
    alternative_phone_no: '',
    location: '',
  })

  const router = useRouter()

  useEffect(() => {
    let isRequested

    item.requests.map((req) => {
      if (req.requested_by === user?.id) {
        isRequested = true
      } else {
        isRequested = false
      }
    })

    if (isRequested) {
      router.back()
    }
  })

  const handleSubmit = async (e) => {
    e.preventDefault()

    //validation
    const hasEmptyFields = Object.values(values).some(
      (element) => element === '',
    )
    if (hasEmptyFields) {
      toast.error('Please fill in all fields')
      return
    }

    const res = await fetch(`${API_URL}/requests`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(values),
    })

    const data = await res.json()

    if (!res.ok) {
      toast.error(data.message[0].messages[0].id)
    } else {
      // const item = await res.json()
      // router.push(`/dashboard/items/${item.slug}`)
      router.push('/dashboard')
    }
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setValues({ ...values, [name]: value })
  }

  return (
    <MainLayout>
      <Head>
        <title>{`Request ${item.name}`} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toaster position="top-center" reverseOrder={false} />
      <Wrapper title="Submit a request">
        <div className="px-10 py-8 border border-gray-300 bg-white">
          <h1 className="mb-2 font-semibold text-gray-700 uppercase text-lg ">{`${item.name}`}</h1>
          <p className="my-2 text-sm tracking-wider font-normal text-gray-500">{`By ${item.user.username}`}</p>
          <p>{item.description}</p>
          <div className="pt-2 pb-6">
            <Link href={`/dashboard/items/${item.slug}`}>
              <a className="text-gray-600 text-base underline">
                View Posted Item
              </a>
            </Link>
          </div>

          {/* <div className="pt-5 font-semibold uppercase">Submit a request</div> */}
          <form onSubmit={handleSubmit} className="border-t-2 border-gray-300">
            <div className="pt-3 w-full">
              <div className="relative pt-3">
                <label
                  htmlFor="message"
                  className="leading-7 text-sm text-gray-600 font-semibold"
                >
                  Reasons for wanting the items.*
                </label>
                <textarea
                  id="message"
                  name="description"
                  className="input-give"
                  placeholder="In about 50 words. Be short and precise."
                  rows="4"
                  value={values.description}
                  onChange={handleInputChange}
                ></textarea>
              </div>
              <div className="sm:flex sm:gap-2">
                <div className="relative pt-3 sm:w-1/2">
                  <label className="leading-7 text-sm text-gray-600 font-semibold">
                    Phone Number*
                  </label>
                  <input
                    type="number"
                    placeholder="+25412345678"
                    name="phone_number"
                    value={values.phone_number}
                    onChange={handleInputChange}
                    className="input-give"
                  />
                </div>
                <div className="relative pt-3 sm:w-1/2">
                  <label className="leading-7 text-sm text-gray-600 font-semibold">
                    Alternative Phone Number*
                  </label>
                  <input
                    name="alternative_phone_no"
                    type="number"
                    placeholder="+25412345678"
                    value={values.alternative_phone_no}
                    onChange={handleInputChange}
                    className="input-give"
                  />
                </div>
              </div>
              <div className="relative pt-3">
                <label className="leading-7 text-sm text-gray-600 font-semibold">
                  Address*
                </label>
                <input
                  name="location"
                  type="text"
                  placeholder="Suggest a meetup location"
                  value={values.location}
                  onChange={handleInputChange}
                  className="input-give"
                />
              </div>
            </div>
            <div className="py-2">
              N/B: Once submitted, wait for the item owner to accept. You will
              be notified.
            </div>
            <div className="w-full mt-7">
              <Link href="#">
                <a className="text-gray-600 border border-gray-200 py-3 w-full px-5 mr-2 rounded-sm">
                  Cancel
                </a>
              </Link>
              <button
                className="text-gray-600 font-semibold bg-yellow-400 py-3 px-5 rounded-sm"
                type="submit"
              >
                Submit Request
              </button>
            </div>
          </form>
        </div>
      </Wrapper>
    </MainLayout>
  )
}

export async function getServerSideProps({ req, params: { id } }) {
  const { token } = parseCookies(req)

  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const res = await fetch(`${API_URL}/items/${id}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const item = await res.json()

  return {
    props: {
      token,
      item,
    },
  }
}

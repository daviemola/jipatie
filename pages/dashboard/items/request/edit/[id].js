import AuthContext from '@/context/AuthContext'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState, useContext, useEffect } from 'react'
import { FaSave } from 'react-icons/fa'
import MainLayout from '@/components/layout/MainLayout'
import { API_URL } from '@/config/index'
import toast, { Toaster } from 'react-hot-toast'
import { parseCookies } from '@/helpers/index'

export default function RequestPage({ item, request, token }) {
  const { user } = useContext(AuthContext)

  const [values, setValues] = useState({
    description: request.description,
    item: item.id,
    phone_number: request.phone_number,
    alternative_phone_no: request.alternative_phone_no,
    location: request.location,
  })

  const router = useRouter()

  let isRequested

  item.requests.map((req) => {
    if (req.requested_by === user?.id) {
      isRequested = true
    } else {
      isRequested = false
    }
  })

  if (isRequested) {
    router.back()
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    //validation
    const hasEmptyFields = Object.values(values).some(
      (element) => element === '',
    )
    if (hasEmptyFields) {
      toast.error('Please fill in all fields')
      return
    }

    const res = await fetch(`${API_URL}/requests`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(values),
    })

    const data = await res.json()

    if (!res.ok) {
      toast.error(data.message[0].messages[0].id)
    } else {
      // const item = await res.json()
      // router.push(`/dashboard/items/${item.slug}`)
      router.push('/dashboard/items')
    }
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setValues({ ...values, [name]: value })
  }

  return (
    <MainLayout>
      <Head>
        <title>{`Request ${item.name}`} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toaster position="top-center" reverseOrder={false} />
      <section className="text-gray-600 body-font relative">
        <div className="container px-5 py-10 mx-auto bg-white">
          <div className="lg:w-1/2 md:w-2/3 mx-auto sm:border border-gray-200 sm:p-10">
            <h1 className="uppercase font-semibold text-xl mb-3 text-center">
              Send a Request for:
            </h1>
            <h1 className="mb-2 font-semibold text-gray-600 uppercase text-lg ">{`${item.name}`}</h1>
            <p>{item.description}</p>
            <p className="my-2 text-sm font-semibold text-gray-500">{`By ${item.user.username}`}</p>
            <div className="pt-5 font-semibold uppercase">
              Fill the below form.
            </div>
            <form onSubmit={handleSubmit}>
              <div className="py-3 w-full">
                <div className="relative">
                  <label
                    htmlFor="message"
                    className="leading-7 text-sm text-gray-600 font-semibold"
                  >
                    Reasons for wanting the items.*
                  </label>
                  <textarea
                    id="message"
                    name="description"
                    className="input-give"
                    placeholder="In about 50 words. Be short and precise."
                    rows="4"
                    value={values.description}
                    onChange={handleInputChange}
                  ></textarea>
                </div>
              </div>
              <div className="sm:flex sm:gap-2">
                <div className="relative pt-3 sm:w-1/2">
                  <label className="leading-7 text-sm text-gray-600 font-semibold">
                    Phone Number*
                  </label>
                  <input
                    type="number"
                    placeholder="+25412345678"
                    name="phone_number"
                    value={values.phone_number}
                    onChange={handleInputChange}
                    className="input-give"
                  />
                </div>
                <div className="relative pt-3 sm:w-1/2">
                  <label className="leading-7 text-sm text-gray-600 font-semibold">
                    Alternative Phone Number*
                  </label>
                  <input
                    name="alternative_phone_no"
                    type="number"
                    placeholder="+25412345678"
                    value={values.alternative_phone_no}
                    onChange={handleInputChange}
                    className="input-give"
                  />
                </div>
              </div>
              <div className="relative pt-3">
                <label className="leading-7 text-sm text-gray-600 font-semibold">
                  Address*
                </label>
                <input
                  name="location"
                  type="text"
                  placeholder="Suggest a meetup location"
                  value={values.location}
                  onChange={handleInputChange}
                  className="input-give"
                />
              </div>
              <div className="py-2 m-3 w-full">
                <button className="submit-btn" type="submit">
                  <FaSave className="mt-1 mr-2" />
                  SUBMIT REQUEST
                </button>
              </div>
            </form>
          </div>
        </div>
      </section>
    </MainLayout>
  )
}

export async function getServerSideProps({ req, params: { id } }) {
  const { token } = parseCookies(req)

  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const reqs = await fetch(`${API_URL}/requests/${id}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const res = await fetch(`${API_URL}/items/${id}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  console.log(res.json())

  const item = await res.json()
  const request = await reqs.json()

  return {
    props: {
      token,
      item,
      request,
    },
  }
}

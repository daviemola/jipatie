import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { FaSave } from 'react-icons/fa'
import MainLayout from '@/components/layout/MainLayout'
import { API_URL } from '@/config/index'
import toast, { Toaster } from 'react-hot-toast'
import { parseCookies } from '@/helpers/index'
import ImageUpload from '@/components/each-item/ImageUpload'

export default function AddItemPage({ token, item }) {
  const [values, setValues] = useState({
    name: item.name,
    value: item.value,
    description: item.description,
    size: item.size,
    color: item.color,
    rating: item.rating,
    condition: item.condition,
    location: item.location,
    category: item.category,
  })

  const router = useRouter()

  const handleSubmit = async (e) => {
    e.preventDefault()

    //validation
    const hasEmptyFields = Object.values(values).some(
      (element) => element === '',
    )
    if (hasEmptyFields) {
      toast.error('Please fill in all fields')
    }

    const res = await fetch(`${API_URL}/items/${item.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(values),
    })

    if (!res.ok) {
      toast.error('Something went wrong. Try again.')
    } else {
      // const item = await res.json()
      // router.push(`/dashboard/items/${item.slug}`)
      router.push('/dashboard/items')
    }
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setValues({ ...values, [name]: value })
  }

  return (
    <MainLayout>
      <Head>
        <title>Edit Item</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toaster position="top-center" reverseOrder={false} />
      <section className="text-gray-600 body-font relative">
        <div className="container px-5 py-10 mx-auto bg-white">
          <div className="lg:w-1/2 md:w-2/3 mx-auto sm:border border-gray-200 sm:p-10">
            <ImageUpload item={item} token={token} />
            <div className="flex flex-col w-full my-2">
              <h1 className="sm:text-2xl text-xl font-semibold mt-3 mb-1 text-gray-600">
                Edit Item
              </h1>
            </div>
            <form onSubmit={handleSubmit}>
              <div className="flex flex-wrap -m-2">
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      Item Name*
                    </label>
                    <input
                      type="text"
                      name="name"
                      value={values.name}
                      onChange={handleInputChange}
                      className="input-give"
                    />
                  </div>
                </div>
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label className="leading-7 text-sm text-gray-600 font-semibold">
                      Estimated Item Value*
                    </label>
                    <input
                      type="number"
                      id="value"
                      name="value"
                      className="input-give"
                      value={values.value}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                <div className="p-2 w-1/2 my-2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      <span>Item Size*</span>
                      <select
                        name="size"
                        form=""
                        className="form-select block w-full input-give p-2"
                        value={values.size}
                        onChange={handleInputChange}
                      >
                        <option>Select Item Size</option>
                        <option value="small">Small</option>
                        <option value="medium">Medium</option>
                        <option value="large">Large</option>
                        <option value="extra-large">Extra-Large</option>
                      </select>
                    </label>
                  </div>
                </div>
                <div className="p-2 w-1/2 my-2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      <span>Item Color*</span>
                      <select
                        name="color"
                        form=""
                        className="form-select block w-full input-give p-2"
                        value={values.color}
                        onChange={handleInputChange}
                      >
                        <option>Select Item Color</option>
                        <option value="green">Green</option>
                        <option value="black">Black</option>
                        <option value="blue">Blue</option>
                        <option value="yellow">Yellow</option>
                        <option value="red">Red</option>
                        <option value="white">White</option>
                        <option value="multi">Multi</option>
                        <option value="other">Other</option>
                      </select>
                    </label>
                  </div>
                </div>
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label
                      htmlFor="email"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      Out of 10 condition*
                    </label>
                    <input
                      type="number"
                      name="rating"
                      className="input-give"
                      value={values.rating}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      <span>Item Condition*</span>
                      <select
                        name="condition"
                        id="cars"
                        form=""
                        className="form-select block w-full input-give p-2"
                        value={values.condition}
                        onChange={handleInputChange}
                      >
                        <option>Select Item Condition</option>
                        <option value="excellent">Excellent</option>
                        <option value="great">Great</option>
                        <option value="good">Good</option>
                        <option value="fair">Fair</option>
                        <option value="bad">Bad</option>
                      </select>
                    </label>
                  </div>
                </div>
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      Item Location*
                    </label>
                    <input
                      type="text"
                      name="location"
                      className="input-give"
                      value={values.location}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>
                <div className="p-2 w-1/2">
                  <div className="relative">
                    <label
                      htmlFor="name"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      <span>Item Category*</span>
                      <select
                        name="category"
                        id="cars"
                        form=""
                        className="form-select block w-full input-give p-2"
                        value={values.category}
                        onChange={handleInputChange}
                      >
                        <option>Select Item Category</option>
                        <option value={1}>Fashion</option>
                        <option value={2}>Furniture & Appliances</option>
                        <option value={3}>Food and personal care</option>
                        <option value={4}>Electronics</option>
                        <option value={5}>Toys, hobby and diy</option>
                        <option value={6}>Other</option>
                      </select>
                    </label>
                  </div>
                </div>
                <div className="p-2 w-full">
                  <div className="relative">
                    <label
                      htmlFor="message"
                      className="leading-7 text-sm text-gray-600 font-semibold"
                    >
                      Item Description*
                    </label>
                    <textarea
                      id="message"
                      name="description"
                      className="input-give"
                      rows="4"
                      value={values.description}
                      onChange={handleInputChange}
                    ></textarea>
                  </div>
                </div>
                <div className="p-2 m-3 w-full">
                  <button className="submit-btn" type="submit">
                    <FaSave className="mt-1 mr-2" />
                    SUBMIT ENTRIES
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </section>
    </MainLayout>
  )
}

export async function getServerSideProps({ req, params: { id } }) {
  const { token } = parseCookies(req)

  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const res = await fetch(`${API_URL}/items/${id}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const item = await res.json()

  return {
    props: {
      token,
      item,
    },
  }
}

import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState, useContext } from 'react'
import AuthContext from '@/context/AuthContext'
import MainLayout from '@/components/layout/MainLayout'
import { API_URL } from '@/config/index'
import { parseCookies } from '@/helpers/index'
import { Switch } from '@headlessui/react'
import Link from 'next/link'
import toast, { Toaster } from 'react-hot-toast'

export default function RequestPage({ item, request, token }) {
  const [enabledAccept, setEnabledAccept] = useState(request.accepted)
  const [enabledDelivered, setEnabledDelivered] = useState(request.delivered)

  const router = useRouter()

  const { user } = useContext(AuthContext)

  console.log(request)
  console.log(request.accepted)

  const handleSubmit = async (e) => {
    e.preventDefault()
    const res = await fetch(
      `${API_URL}/requests/${request.id}/${request.item.user}`,
      {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          accepted: enabledAccept,
          delivered: enabledDelivered,
        }),
      },
    )

    if (!res.ok) {
      toast.error('Please fill in all fields')
    } else {
      toast.success('Changes successful.')
      setTimeout(function () {
        router.reload()
      }, 3000)
    }
  }

  return (
    <MainLayout>
      <Head>
        <title>{`Request`} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="text-gray-600 body-font relative">
        <div className="container px-5 py-10 mx-auto bg-white">
          <Toaster position="top-center" reverseOrder={false} />
          <div className="lg:w-1/2 md:w-2/3 mx-auto sm:border border-gray-200 sm:px-10 sm:py-5 sm:rounded-md mb-2">
            <h1 className="text-xl text-gray-500 font-semibold mb-2 uppercase">{`Request for ${request?.item?.name}`}</h1>
            <p className="text-gray-500 font-medium text-sm tracking-wider uppercase mb-2">
              {request?.requested_by?.username}
            </p>
            <p className="mb-1 text-gray-800">{request?.description}</p>
            <p className="mb-1 text-gray-800">{`Suggested meetup location`}</p>
            <p className="mb-1 text-gray-800">{`Contacts`}</p>
            <p className="mb-1 text-gray-800">{`Alternative Contact`}</p>
          </div>
          {request.item.user === user?.id && (
            <form
              className="lg:w-1/2 md:w-2/3 mx-auto sm:border sm:rounded-md border-gray-200 mb-4"
              onSubmit={handleSubmit}
            >
              <div className="md:mx-6 md:px-4 md:py-1 mt-4 font-semibold uppercase text-gray-800">
                <h2>Mark as accepted or delivered</h2>
              </div>
              <div className="md:mx-6 md:px-4 md:py-1">
                <div className="flex items-center justify-between">
                  <div className="flex-grow flex flex-col p-2 mr-6">
                    <h2 className="mr-4 text-base font-semibold text-gray-500 ">
                      Accept this request
                    </h2>
                    <p className="text-sm text-gray-500">
                      You will not accept other requests.
                    </p>
                  </div>

                  <div
                    onClick={() => setEnabledAccept(!enabledAccept)}
                    className={`${
                      enabledAccept ? 'bg-yellow-500' : 'bg-gray-200'
                    } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500`}
                  >
                    <span
                      className={`${
                        enabledAccept ? 'translate-x-6' : 'translate-x-1'
                      } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                    />
                  </div>
                </div>
              </div>
              {request.accepted === true && (
                <div className="md:mx-6 md:px-4 md:py-1">
                  <Switch.Group
                    as="div"
                    className="flex items-center justify-between"
                  >
                    <div className="flex-grow flex flex-col p-2 mr-6">
                      <h2 className="mr-4 text-base font-semibold text-gray-800 ">
                        Delivered
                      </h2>
                      <p className="text-sm text-gray-500">
                        Set the Item to be delivered.
                      </p>
                    </div>

                    <div
                      onClick={() => setEnabledDelivered(!enabledDelivered)}
                      className={`${
                        enabledDelivered ? 'bg-yellow-500' : 'bg-gray-200'
                      } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500`}
                    >
                      <span
                        className={`${
                          enabledDelivered ? 'translate-x-6' : 'translate-x-1'
                        } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                      />
                    </div>
                  </Switch.Group>
                </div>
              )}

              <div className="md:mx-6 md:px-4 md:py-1 my-4">
                <Link href="#">
                  <a className="text-gray-600 border border-gray-200 py-3 w-full px-5 mr-2 rounded-sm">
                    Cancel
                  </a>
                </Link>
                <button
                  className="text-gray-600 font-semibold bg-yellow-400 py-3 px-5 rounded-sm"
                  type="submit"
                >
                  Confirm Changes
                </button>
              </div>
            </form>
          )}
        </div>
      </section>
    </MainLayout>
  )
}

export async function getServerSideProps({ req, params: { slug, requestId } }) {
  const { token } = parseCookies(req)

  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const reqs = await fetch(`${API_URL}/requests/${requestId}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const request = await reqs.json()

  return {
    props: {
      token,
      request,
    },
  }
}

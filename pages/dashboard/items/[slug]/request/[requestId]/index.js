import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState, useContext } from 'react'
import AuthContext from '@/context/AuthContext'
import MainLayout from '@/components/layout/MainLayout'
import { API_URL } from '@/config/index'
import { parseCookies } from '@/helpers/index'
import { Switch } from '@headlessui/react'
import Link from 'next/link'
import toast, { Toaster } from 'react-hot-toast'
import ReqDetailsRequestor from '@/components/each-item/ReqDetailsRequestor'
import { FiAlertTriangle } from 'react-icons/fi'

export default function RequestPage({ item, request, token }) {
  const [enabledAccept, setEnabledAccept] = useState(request.accepted)
  const [enabledDelivered, setEnabledDelivered] = useState(request.delivered)

  // const [itemAccept, setItemAccept] = useState(item.accepted)
  // const [itemDelivered, setItemDelivered] = useState(item.delivered)

  const router = useRouter()
  const { user } = useContext(AuthContext)

  const handleSubmit = async (e) => {
    e.preventDefault()

    // SET REQUEST AS ACCEPTED OR DELIVERED

    const res = await fetch(
      `${API_URL}/requests/${request.id}/${request.item.user}`,
      {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          accepted: enabledAccept,
          delivered: enabledDelivered,
        }),
      },
    )

    // SET ITEM AS DELIVERED OR ACCEPTED

    const result = await fetch(`${API_URL}/items/${item.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        accepted: enabledAccept,
        delivered: enabledDelivered,
      }),
    })

    // CHECK FOR ERRORS DURING THE API CALL

    if (!res.ok || !result.ok) {
      toast.error('Something went wrong. Try again.')
    } else {
      toast.success('Changes successful.')
      setTimeout(function () {
        router.reload()
      }, 3000)
    }
  }

  return (
    <MainLayout>
      <Head>
        <title>{`Request`} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="text-gray-600 body-font overflow-hidden">
        <div className="container px-3 py-6 mx-auto max-w-screen-xl mt-6 min-h-full">
          <Toaster position="top-center" reverseOrder={false} />
          <div className="lg:w-1/2 md:w-2/3 mx-auto sm:border border-gray-200 sm:px-10 sm:py-5 sm:rounded-md mb-6 sm:bg-white">
            <h1 className="text-xl text-gray-700 font-semibold mb-2 mt-2 uppercase">{`Request for ${request?.item?.name}`}</h1>
            <p className="text-gray-500 font-medium text-sm tracking-wider uppercase mb-2">
              {request?.requested_by?.username}
            </p>
            <p className="mb-1 text-gray-800">{request?.description}</p>
            <p className="mb-1 text-gray-800">{`Suggested meetup location`}</p>
            <p className="mb-1 text-gray-800">{`Contacts`}</p>
            <p className="mb-1 text-gray-800">{`Alternative Contact`}</p>
          </div>

          {/* CHECK IF THE LOGGED IN USER IS THE ITEM OWNER */}

          {request.item.user === user?.id && (
            <form
              className="lg:w-1/2 md:w-2/3 mx-auto sm:border sm:rounded-md border-gray-200 mb-4 sm:bg-white"
              onSubmit={handleSubmit}
            >
              {/* CHECK IF ITEM IS ACCEPTED AND REQUEST IS ACCEPTED OTHERWISE SHOW ALERT */}

              {(request.accepted === false && item.accepted === false) ||
              (request.accepted === true && item.accepted === true) ? (
                <div className="md:mx-6 md:px-4 md:py-1 mt-6 pb-4 font-semibold uppercase text-gray-800">
                  <h2 className="sm:pb-4">Mark as accepted or delivered</h2>
                </div>
              ) : (
                <div className="md:mx-6 md:px-4 md:py-3 md:my-4 m-4 font-semibold  text-gray-600">
                  <div className="flex items-center">
                    <FiAlertTriangle className="text-emerald-600 text-6xl mr-3" />
                    <h2>
                      If you want to accept this request you must not accept any
                      other request.
                    </h2>
                  </div>
                </div>
              )}

              {/* CHECK IF ITEM IS NOT ACCEPTED AND REQUEST IS NOT ACCEPTED BEFORE SHOWING THE CARD */}

              {(request.accepted === false && item.accepted === false) ||
                (request.accepted === true && item.accepted === true && (
                  <div className="md:mx-6 md:px-4 md:py-1">
                    <div className="flex items-center justify-between">
                      <div className="flex-grow flex flex-col p-2 mr-6">
                        <h2 className="mr-4 text-base font-semibold text-gray-600 ">
                          Accept this request
                        </h2>
                        <p className="text-sm text-gray-500">
                          You will not accept other requests.
                        </p>
                      </div>

                      <div
                        onClick={() => setEnabledAccept(!enabledAccept)}
                        className={`${
                          enabledAccept ? 'bg-emerald-500' : 'bg-gray-200'
                        } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500`}
                      >
                        <span
                          className={`${
                            enabledAccept ? 'translate-x-6' : 'translate-x-1'
                          } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                        />
                      </div>
                    </div>
                  </div>
                ))}

              {request.accepted === false && item.accepted === false && (
                <div className="md:mx-6 md:px-4 md:py-1">
                  <div className="flex items-center justify-between">
                    <div className="flex-grow flex flex-col p-2 mr-6">
                      <h2 className="mr-4 text-base font-semibold text-gray-600 ">
                        Accept this request
                      </h2>
                      <p className="text-sm text-gray-500">
                        You will not accept other requests.
                      </p>
                    </div>

                    <div
                      onClick={() => setEnabledAccept(!enabledAccept)}
                      className={`${
                        enabledAccept ? 'bg-emerald-500' : 'bg-gray-200'
                      } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500`}
                    >
                      <span
                        className={`${
                          enabledAccept ? 'translate-x-6' : 'translate-x-1'
                        } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                      />
                    </div>
                  </div>
                </div>
              )}

              {/* CHECK IF THE ITEM IS ACCEPTED FIRST BEFORE SHOWING THE DELIVERED SWITCH */}

              {request.accepted === true && item.accepted === true && (
                <div className="md:mx-6 md:px-4 md:py-1">
                  <Switch.Group
                    as="div"
                    className="flex items-center justify-between"
                  >
                    <div className="flex-grow flex flex-col p-2 mr-6">
                      <h2 className="mr-4 text-base font-semibold text-gray-600 ">
                        Mark as delivered
                      </h2>
                      <p className="text-sm text-gray-500">
                        Set the Item to be delivered.
                      </p>
                    </div>

                    <div
                      onClick={() => setEnabledDelivered(!enabledDelivered)}
                      className={`${
                        enabledDelivered ? 'bg-emerald-500' : 'bg-gray-200'
                      } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500`}
                    >
                      <span
                        className={`${
                          enabledDelivered ? 'translate-x-6' : 'translate-x-1'
                        } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                      />
                    </div>
                  </Switch.Group>
                </div>
              )}

              {/* CHECK IF ITEM IS ACCEPTED AND REQUEST IS ACCEPTED OR IF ITEM AND REQUEST ARE NOT ACCEPTD OTHERWISE DO NOT SHOW BUTTONS */}

              {(request.accepted === false && item.accepted === false) ||
                (request.accepted === true && item.accepted === true && (
                  <div className="md:mx-6 md:px-4 md:py-1 my-4">
                    <Link href="#">
                      <a className="text-gray-600 border border-gray-200 py-3 w-full px-5 mr-2 rounded-sm">
                        Cancel
                      </a>
                    </Link>
                    <button
                      className="text-gray-600 font-semibold bg-emerald-400 py-3 px-5 rounded-sm"
                      type="submit"
                    >
                      Confirm Changes
                    </button>
                  </div>
                ))}

              {request.accepted === false && item.accepted === false && (
                <div className="md:mx-6 md:px-4 md:py-1 my-4">
                  <Link href="#">
                    <a className="text-gray-600 border border-gray-200 py-3 w-full px-5 mr-2 rounded-sm">
                      Cancel
                    </a>
                  </Link>
                  <button
                    className="text-gray-600 font-semibold bg-emerald-400 py-3 px-5 rounded-sm"
                    type="submit"
                  >
                    Confirm Changes
                  </button>
                </div>
              )}
            </form>
          )}

          {/* SHOWING WHETHR REQUEST IS ACCEPTED OR DELIVERED TO THE REQUESTOR OF THE ITEM */}

          {request?.requested_by?.id === user?.id && (
            <ReqDetailsRequestor request={request} item={item} />
          )}
        </div>
      </section>
    </MainLayout>
  )
}

export async function getServerSideProps({ req, params: { slug, requestId } }) {
  const { token } = parseCookies(req)

  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const reqs = await fetch(`${API_URL}/requests/${requestId}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const res = await fetch(`${API_URL}/items/${slug}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  const request = await reqs.json()
  const item = await res.json()

  return {
    props: {
      token,
      item,
      request,
    },
  }
}
